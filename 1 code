#include "Utils.h"
#include "MemMap.h"
#include "StdTypes.h"
#include "DIO_interface.h"  
#include "MOTOR_interface.h"
#include "LCD.h"
#include "KeyPad.h"
#include "Stepper.h"
#include "ADC.h"
#include "Sensors.h"
#include "EX_Interrupt.h"
#include "Timers.h"
#include "SERVO.h"
#include "RGB.h"
#include "Converter.h"
#include "ULTRASONIC.h"
#include "UART.h"
#include "UART_Services.h"

#define Buzzer_ON DIO_WritePin(PINC5,HIGH)
#define Buzzer_OFF DIO_WritePin(PINC5,LOW)

 void func_OCA(void)
 {
	DIO_WritePin(PINC5,LOW);
 }
void func_OCB(void)
{
DIO_WritePin(PINC5,HIGH);
}
void fun_ledon(void)
{
	DIO_WritePin(PINC0,HIGH);
	Buzzer_ON;

}
void fun_ledoff(void)
{
	DIO_WritePin(PINC0,LOW);
}
u8 buffer_string[100] ;
u8 led1[]={"led on"};
u8 led0[]={"led off"};

typedef struct {
	u8 *str;
	void (*pf)(void);
} Task_type;
#define ARRAY_SIZE 4
Task_type arr[ARRAY_SIZE]={{"led on",fun_ledon},
						   {"led off",fun_ledoff}
							   
						  };
	
	/* function that take array of struct and its size .. then compare the UART buffer 
	   with every string on it then excute its Function */
	void search_array(Task_type* arr,u8 size,u8* buffer_str)
	{
		u8 i;
		for (i=0;i < size;i++)
		{
			if (string_compare_sheet(buffer_str,(arr[i].str))==1)
			{
				(*(arr+i)).pf();
				return;
				//arr[i].pf();
			}
		}
	}

int main(void)
{
    sei(); // enable global interrupt
/*******************************Initilization *******************************/
	DIO_Init();
	LCD_Init();
	ADC_Init(VREF_VCC,ADC_SCALER_64);
    UART_Init();
/*********************************** Interrupt*******************************/
	/*EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
	EXI_Enable(EX_INT1);*/
	// EXI_SetCallBack(EX_INT1,functio1);
/************************ Timer ****************************/
	/*TIMER0_Init(TIMER0_FASTPWM_MODE,TIMER0_SCALER_8);
	TIMER0_OC0Mode(OC0_NON_INVERTING);
	
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8); // fast pwm mode scaler 8
	Timer1_OCRA1Mode(OCRA_NON_INVERTING);
	Timer1_OCRB1Mode(OCRA_NON_INVERTING);
	
	Timer1_OCB_InterruptEnable();
	Timer1_OCA_InterruptEnable();
	Timer1_OCA_SetCallBack(func_OCA);
	Timer1_OCB_SetCallBack(func_OCB);*/
/********************************************************/

LCD_GoTo_WriteString(0,0,"UART");


    while(1)
    {
 		UART_ReceiveString(buffer_string);
		 search_array(arr,ARRAY_SIZE,buffer_string);		 
		 LCD_GoTo_WriteString(1,0,buffer_string);
    }
}
 
 

 